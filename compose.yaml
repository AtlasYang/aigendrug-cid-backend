services:
  main-database:
    build:
      context: ./main-database
      dockerfile: Dockerfile
      network: host
    container_name: aigendrug-main-db
    ports:
      - ${MAIN_DB_PORT_BINDING}
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - aigendrug-main-db:/var/lib/postgresql/data
    healthcheck:
      test:
        ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 5s
      timeout: 10s
      retries: 10

  main-storage:
    image: minio/minio
    container_name: aigendrug-main-storage
    volumes:
      - aigendrug-main-storage:/data
    ports:
      - ${MAIN_STORAGE_PORT_BINDING}
      - ${MAIN_STORAGE_PORT_BINDING_2}
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: ${MAIN_STORAGE_COMMAND}
    healthcheck:
      test: ["CMD", "curl", "-f", "${MAIN_STORAGE_HEALTHCHECK_URL}"]
      interval: 30s
      timeout: 10s
      retries: 3

  web-server:
    build:
      context: ./web-server
      dockerfile: Dockerfile
      network: host
    container_name: aigendrug-web-server
    ports:
      - ${WEB_SERVER_PORT_BINDING}
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - STORAGE_HOST=${STORAGE_HOST}
      - MINIO_URL=${MINIO_URL}
      - MINIO_ACCESS_KEY_ID=${MINIO_ACCESS_KEY_ID}
      - MINIO_SECRET_ACCESS_KEY=${MINIO_SECRET_ACCESS_KEY}
      - KAFKA_SERVER=broker:29092
      - KAFKA_GROUP_ID=aigendrug-web-server
      - KAFKA_CLIENT_ID=aigendrug-web-server
    depends_on:
      main-database:
        condition: service_healthy

  ml-server:
    build:
      context: ./ml-server
      dockerfile: Dockerfile
      network: host
    container_name: aigendrug-ml-server
    ports:
      - "6805:5000"
    environment:
      - KAFKA_SERVER=broker:29092
      - KAFKA_GROUP_ID=aigendrug-ml-server
      - MODEL_WEIGHTS_PATH=/app/weights/
    volumes:
      - ./ml-server/weights:/app/weights

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: aigendrug-zookeeper
    ports:
      - ${ZOOKEEPER_PORT_BINDING}
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-server:7.5.0
    hostname: broker
    container_name: aigendrug-broker
    depends_on:
      - zookeeper
    ports:
      - ${KAFKA_PORT_BINDING}
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: "true"
      CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"

volumes:
  aigendrug-main-db:
    external: false
  aigendrug-main-storage:
    external: false
